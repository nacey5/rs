<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

    <!--
    1,mybatis可以使用properties来引入外部properties配置文件的内容；
    resource: 引入类路径下的资源
    url: 引入网络路径或者磁盘路径下的资源
    -->
    <properties resource="druid.properties"></properties>

    <!--
      settings包含很多重要的设置项
        setting 用来设置每一个设置项
            name:设置项名
            value：设置项取值
    -->
    <settings>
        <setting name="mapUnderscoreToCamelCase" value="true"/>
        <setting name="jdbcTypeForNull" value="NULL"/>
        <!--显示指定的每个我们需要更改配置的值，即使他是默认的。防止版本更新带来的问题-->
        <setting name="lazyLoadingEnabled" value="true"/>
        <setting name="aggressiveLazyLoading" value="false"/>
        <!--开启缓存-->
        <setting name="cacheEnabled" value="true"/>
    </settings>

    <!--
    typeAliases:别名处理器，可以为java类型起别名，别名不区分大小写
    -->
    <typeAliases>
        <!--1，
        typeAlias:为某个java类型起别名
        type：指的是要起的别名的全类名；默认别名就是类名小写；employee
        alias:指定新的别名
        -->

<!--        <typeAlias type="com.hzh.mybatis.bean.Employee" alias="emp"></typeAlias>    -->

        <!--2，
        批量起别名:package
        package:为某个包下的所有类批量起别名
        name：指定包名（为当前包以及下面的所有后代包的每一个类都起一个默认别名，就是类名小写）
        -->
        <package name="pojo.bean"/>

        <!-- 3，
        批量起别名的情况下，使用Alisa注解为某个指定类型指定新的别名
        -->
    </typeAliases>
    <!--
     environments：环境们，mybatis可以配置多种环境，default指定使用某种环境，可以达到快速切换环境
        environment：配置一个具体的环境信息；必须有两个标签：：：id代表当前环境的唯一标识
            transactionManager:事务管理器
                type：事务管理器的类型 type="[JDBC（JdbcTransactionFactory）|MANAGED（MangeTransactionFactory）]
                    自定义事务管理器：实现TransactionFactory接口，type指定为全类名
            dataSource:数据源；
                type:数据源类型 type="[UNPOOLED|POOLED|JNDI]
                    自定义数据源：实现DataSourceFactory接口，type是自定义数据源的全类名

     -->
    <environments default="development">
        <environment id="development">
            <transactionManager type="JDBC"/>
            <dataSource type="POOLED">
                <property name="driver" value="${driverClass}"/>
                <property name="url" value="${url}"/>
                <property name="username" value="${username}"/>
                <property name="password" value="${password}"/>
            </dataSource>
        </environment>
    </environments>

    <!--
     databaseIdProvider：支持多数据库厂商
        type="DB_VENDOR"：VendorDatabaseIdProvider
            作用：得到数据库厂商的标识（驱动自带），mybatis就能根据数据库厂商标识来执行不同的sql
    -->
    <databaseIdProvider type="DB_VENDOR">
        <!-- 为不同的厂商起别名       -->
        <property name="MySQL" value="mysql"/>
        <property name="Oracle" value="oracle"/>
        <property name="SQL Server" value="sqlserver"/>
    </databaseIdProvider>
    <!--
    将写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中
    -->
    <!--
     mappers:将sql映射注册到全局配置中
        mapper：注册一个sql映射
            注册配置文件的：
                resource：引用类路径下的sql映射文件
                url：引用网络路径或者磁盘路径下的sql映射文件
            注册接口：
            class:引用（注册）接口，
                1,有sql映射文件，映射文件必须和接口同名，并且放在接口的同一目录下;
                2，没有sql映射文件，所有的sql都是利用注解写在接口上
                推荐：比较重要的，复杂的Dao接口我们来写sql映射文件
                     不重要的，间的的DAO接口为了开发快速可以使用注解
     -->
    <mappers>

        <!--
         批量注册:
         同样的没有注册sql映射文件，需要将sql映射文件和类放在同一个包下并且同名才能成功：适用于大规模的处理
         -->
        <!--<package name="com.hzh.mybatis.dao"/>-->
        <!--<mapper resource="conf\mapper\LoginUser.xml"></mapper>-->
        <mapper resource="dao\UserDao.xml"></mapper>
        <mapper resource="dao\ActivityDao.xml"></mapper>
    </mappers>
</configuration>